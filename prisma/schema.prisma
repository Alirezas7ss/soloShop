// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdStore Stores[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]
  Product  ProductList[]
  username String? @unique
  Comment     Comment[]
  CommentVote CommentVote[]
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          String? @default("user")
  address       String?
  reservation Reservation[]
  accounts Account[]
  // productsList ProductList[]
  sessions Session[]
  Post     Post[]
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model ProductList {
  id          String    @id @default(cuid())
  title       String
  description String
  imageSrc String[]
  subcategory String
  tags String[]
  category String[]
  price Decimal
  discount Int
  locationValue String?
  inventory Int
  content     Json?
  quantity Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  store   Stores @relation(fields: [storeId], references: [id])
  storeId String
  reservation Reservation[]
  comments    Comment[] 
  votes       Vote[]
}
// model ProductList {
//   id    String @id @default(cuid())
//   title String
//   description String
//   imageSrc String[]
//   createdAt DateTime @default(now())
//   category  String
//   locationValue String
//   userId String 
//   price Int
//   discount Int
//   point Int
//   reservation Reservation[]
//   // product User @relation(fields: [userId], references: [id] )
//   @@map(name: "productsList")
// }

model Reservation {
  id String @id @default(cuid())
  userId String 
  listingId String   
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing ProductList @relation(fields: [listingId], references: [id], onDelete: Cascade)
  @@map(name: "reservations")
}

enum VoteType {
  UP
  DOWN
}

model Stores  {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   ProductList[]

  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  store   Stores @relation(fields: [storeId], references: [id])
  storeId String

  @@id([userId, storeId])
}


model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  product      ProductList     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  product   ProductList     @relation(fields: [producttId], references: [id], onDelete: Cascade)
  producttId String
  type   VoteType

  @@id([userId, producttId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}